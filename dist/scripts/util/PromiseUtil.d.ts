export declare function wait(time: number): Promise<void>;
export declare function waitAnimation(time?: number): Promise<{}>;
export declare function retry(time: number, callback: () => Promise<boolean>): Promise<void>;
declare type ExtendedFunction0<T> = (...args: any[]) => T;
declare type ExtendedFunction1<T, U> = (arg0: T) => U;
declare type ExtendedFunction2<T, U, V> = (arg0: T, arg1: U) => V;
declare type ExtendedFunction3<T, U, V, W> = (arg0: T, arg1: U, arg2: V) => W;
declare type ExtendedFunction4<T, U, V, W, X> = (arg0: T, arg1: U, arg2: V, arg3: W) => X;
export declare function debounce<T>(func: ExtendedFunction0<T>, wait: number, immediate?: boolean): () => void;
export declare function debounce<T, U>(func: ExtendedFunction1<T, U>, wait: number, immediate?: boolean): (arg0: T) => void;
export declare function debounce<T, U, V>(func: ExtendedFunction2<T, U, V>, wait: number, immediate?: boolean): (arg0: T, arg1: U) => void;
export declare function debounce<T, U, V, W>(func: ExtendedFunction3<T, U, V, W>, wait: number, immediate?: boolean): (arg0: T, arg1: U, arg2: V) => void;
export declare function debounce<T, U, V, W, X>(func: ExtendedFunction4<T, U, V, W, X>, wait: number, immediate?: boolean): (arg0: T, arg1: U, arg2: V, arg3: W) => void;
declare type ExtendedPromiseFunction0<T> = (...args: any[]) => Promise<T>;
declare type ExtendedPromiseFunction1<T, U> = (arg0: T) => Promise<U>;
declare type ExtendedPromiseFunction2<T, U, V> = (arg0: T, arg1: U) => Promise<V>;
declare type ExtendedPromiseFunction3<T, U, V, W> = (arg0: T, arg1: U, arg2: V) => Promise<W>;
declare type ExtendedPromiseFunction4<T, U, V, W, X> = (arg0: T, arg1: U, arg2: V, arg3: W) => Promise<X>;
declare type ExtendedPromise0<T> = () => Promise<T>;
declare type ExtendedPromise1<T, U> = (arg0: T) => Promise<U>;
declare type ExtendedPromise2<T, U, V> = (arg0: T, arg1: U) => Promise<V>;
declare type ExtendedPromise3<T, U, V, W> = (arg0: T, arg1: U, arg2: V) => Promise<W>;
declare type ExtendedPromise4<T, U, V, W, X> = (arg0: T, arg1: U, arg2: V, arg3: W) => Promise<X>;
export declare function debouncePromise<T>(func: ExtendedPromiseFunction0<T>, wait: number, thisArg?: any): ExtendedPromise0<T>;
export declare function debouncePromise<T, U>(func: ExtendedPromiseFunction1<T, U>, wait: number, thisArg?: any): ExtendedPromise1<T, U>;
export declare function debouncePromise<T, U, V>(func: ExtendedPromiseFunction2<T, U, V>, wait: number, thisArg?: any): ExtendedPromise2<T, U, V>;
export declare function debouncePromise<T, U, V, W>(func: ExtendedPromiseFunction3<T, U, V, W>, wait: number, thisArg?: any): ExtendedPromise3<T, U, V, W>;
export declare function debouncePromise<T, U, V, W, X>(func: ExtendedPromiseFunction4<T, U, V, W, X>, wait: number, thisArg?: any): ExtendedPromise4<T, U, V, W, X>;
export {};
